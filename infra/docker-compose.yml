version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: pizzaria-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: pizzaria_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-8477}
      TZ: America/Sao_Paulo
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/create-database-complete.sql:/docker-entrypoint-initdb.d/01-init.sql
    ports:
      - "5432:5432"
    networks:
      - pizzaria-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend Node.js
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: pizzaria-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: pizzaria_db
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD:-8477}
      JWT_SECRET: ${JWT_SECRET:-your_strong_jwt_secret_here}
      JWT_EXPIRES_IN: 7d
      CORS_ORIGIN: ${FRONTEND_URL:-http://localhost}
      TZ: America/Sao_Paulo
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend/uploads:/app/uploads
    networks:
      - pizzaria-network
    expose:
      - "3001"

  # Frontend React/Nginx
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${API_URL:-http://localhost/api}
    container_name: pizzaria-frontend
    restart: unless-stopped
    environment:
      TZ: America/Sao_Paulo
    depends_on:
      - backend
    ports:
      - "80:80"
      - "443:443"
    networks:
      - pizzaria-network
    volumes:
      - ./ssl:/etc/nginx/ssl:ro

  # Redis Cache (opcional, para escalabilidade futura)
  redis:
    image: redis:7-alpine
    container_name: pizzaria-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - pizzaria-network
    expose:
      - "6379"

  # Adminer (interface web para PostgreSQL - desenvolvimento)
  adminer:
    image: adminer:latest
    container_name: pizzaria-adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    networks:
      - pizzaria-network
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    profiles:
      - dev

networks:
  pizzaria-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local