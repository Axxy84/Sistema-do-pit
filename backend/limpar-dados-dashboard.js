require('dotenv').config();
const { Pool } = require('pg');

const pool = new Pool({
  host: process.env.DB_HOST || 'localhost',
  port: process.env.DB_PORT || 5432,
  database: process.env.DB_NAME || 'pizzaria_db',
  user: process.env.DB_USER || 'postgres',
  password: process.env.DB_PASSWORD || '8477'
});

async function limparDadosDashboard() {
  let client;
  try {
    client = await pool.connect();
    
    console.log('üîÑ Iniciando limpeza dos dados do dashboard...\n');
    
    // Iniciar uma transa√ß√£o para garantir que todas as opera√ß√µes sejam conclu√≠das ou nenhuma
    await client.query('BEGIN');
    
    // 1. Verificar quantidade de pedidos antes da limpeza
    const pedidosAntesResult = await client.query('SELECT COUNT(*) FROM pedidos');
    const pedidosAntes = parseInt(pedidosAntesResult.rows[0].count);
    console.log(`üìä Total de pedidos antes da limpeza: ${pedidosAntes}`);
    
    // 2. Verificar quantidade de fechamentos de caixa antes da limpeza
    const fechamentosAntesResult = await client.query('SELECT COUNT(*) FROM fechamento_caixa');
    const fechamentosAntes = parseInt(fechamentosAntesResult.rows[0].count);
    console.log(`üìä Total de fechamentos de caixa antes da limpeza: ${fechamentosAntes}`);
    
    // 3. Limpar itens de pedido (devido √† restri√ß√£o de chave estrangeira)
    console.log('\nüóëÔ∏è Removendo itens de pedido...');
    const deleteItensResult = await client.query('DELETE FROM itens_pedido');
    console.log(`‚úÖ Itens de pedido removidos: ${deleteItensResult.rowCount}`);
    
    // 4. Limpar pagamentos de pedido (se existir a tabela)
    try {
      console.log('\nüóëÔ∏è Removendo pagamentos de pedido...');
      const deletePagamentosResult = await client.query('DELETE FROM pagamentos_pedido');
      console.log(`‚úÖ Pagamentos de pedido removidos: ${deletePagamentosResult.rowCount}`);
    } catch (error) {
      console.log('‚ÑπÔ∏è Tabela pagamentos_pedido n√£o existe ou est√° vazia');
    }
    
    // 5. Limpar pedidos
    console.log('\nüóëÔ∏è Removendo pedidos...');
    const deletePedidosResult = await client.query('DELETE FROM pedidos');
    console.log(`‚úÖ Pedidos removidos: ${deletePedidosResult.rowCount}`);
    
    // 6. Limpar fechamentos de caixa
    console.log('\nüóëÔ∏è Removendo fechamentos de caixa...');
    const deleteFechamentosResult = await client.query('DELETE FROM fechamento_caixa');
    console.log(`‚úÖ Fechamentos de caixa removidos: ${deleteFechamentosResult.rowCount}`);
    
    // 7. Limpar o cache do dashboard (se existir a tabela)
    try {
      console.log('\nüóëÔ∏è Limpando cache do dashboard...');
      const deleteCacheResult = await client.query("DELETE FROM cache WHERE key LIKE '%dashboard%'");
      console.log(`‚úÖ Registros de cache removidos: ${deleteCacheResult.rowCount}`);
    } catch (error) {
      console.log('‚ÑπÔ∏è Tabela cache n√£o existe ou n√£o h√° registros de dashboard');
    }
    
    // Confirmar a transa√ß√£o
    await client.query('COMMIT');
    
    // Verificar resultados ap√≥s a limpeza
    const pedidosDepoisResult = await client.query('SELECT COUNT(*) FROM pedidos');
    const pedidosDepois = parseInt(pedidosDepoisResult.rows[0].count);
    
    const fechamentosDepoisResult = await client.query('SELECT COUNT(*) FROM fechamento_caixa');
    const fechamentosDepois = parseInt(fechamentosDepoisResult.rows[0].count);
    
    console.log('\nüìä Resumo da limpeza:');
    console.log(`   ‚Ä¢ Pedidos antes: ${pedidosAntes} ‚Üí depois: ${pedidosDepois}`);
    console.log(`   ‚Ä¢ Fechamentos antes: ${fechamentosAntes} ‚Üí depois: ${fechamentosDepois}`);
    
    console.log('\n‚úÖ Limpeza dos dados do dashboard conclu√≠da com sucesso!');
    console.log('üîÑ Agora voc√™ pode testar os c√°lculos reais do dashboard.');
    
  } catch (error) {
    if (client) {
      await client.query('ROLLBACK');
    }
    console.error('\n‚ùå Erro durante a limpeza dos dados:', error.message);
    console.error(error.stack);
  } finally {
    if (client) {
      client.release();
    }
    process.exit(0);
  }
}

limparDadosDashboard(); 