const db = require('./config/database');

async function verificarPrecos() {
  try {
    console.log('üîç VERIFICANDO PRE√áOS E TAMANHOS NO BANCO DE DADOS...\n');
    
    // Verificar algumas pizzas salgadas
    console.log('üçï PIZZAS SALGADAS:');
    const pizzasSalgadas = await db.query(`
      SELECT nome, categoria, tamanhos_precos, ingredientes 
      FROM produtos 
      WHERE tipo_produto = 'pizza' AND categoria = 'salgada' 
      ORDER BY nome 
      LIMIT 5
    `);
    
    pizzasSalgadas.rows.forEach(pizza => {
      console.log(`\nüìã ${pizza.nome.toUpperCase()}`);
      console.log(`   Ingredientes: ${pizza.ingredientes}`);
      console.log('   Pre√ßos por tamanho:');
      
      if (pizza.tamanhos_precos && Array.isArray(pizza.tamanhos_precos)) {
        pizza.tamanhos_precos.forEach(tamanho => {
          console.log(`     ‚Ä¢ ${tamanho.tamanho}: R$ ${tamanho.preco.toFixed(2)}`);
        });
      } else {
        console.log('     ‚ùå Erro: tamanhos_precos n√£o √© um array v√°lido');
      }
    });

    // Verificar algumas pizzas doces
    console.log('\nüç∞ PIZZAS DOCES:');
    const pizzasDoces = await db.query(`
      SELECT nome, categoria, tamanhos_precos, ingredientes 
      FROM produtos 
      WHERE tipo_produto = 'pizza' AND categoria = 'doce' 
      ORDER BY nome 
      LIMIT 3
    `);
    
    pizzasDoces.rows.forEach(pizza => {
      console.log(`\nüìã ${pizza.nome.toUpperCase()}`);
      console.log(`   Ingredientes: ${pizza.ingredientes}`);
      console.log('   Pre√ßos por tamanho:');
      
      if (pizza.tamanhos_precos && Array.isArray(pizza.tamanhos_precos)) {
        pizza.tamanhos_precos.forEach(tamanho => {
          console.log(`     ‚Ä¢ ${tamanho.tamanho}: R$ ${tamanho.preco.toFixed(2)}`);
        });
      }
    });

    // Verificar bordas
    console.log('\nü•ñ BORDAS RECHEADAS:');
    const bordas = await db.query(`
      SELECT nome, preco_unitario 
      FROM produtos 
      WHERE tipo_produto = 'borda' 
      ORDER BY nome 
      LIMIT 5
    `);
    
    bordas.rows.forEach(borda => {
      console.log(`   ‚Ä¢ ${borda.nome}: R$ ${parseFloat(borda.preco_unitario).toFixed(2)}`);
    });

    // Estat√≠sticas gerais
    console.log('\nüìä ESTAT√çSTICAS GERAIS:');
    const stats = await db.query(`
      SELECT 
        tipo_produto,
        categoria,
        COUNT(*) as quantidade
      FROM produtos 
      GROUP BY tipo_produto, categoria 
      ORDER BY tipo_produto, categoria
    `);
    
    stats.rows.forEach(stat => {
      const categoria = stat.categoria ? ` (${stat.categoria})` : '';
      console.log(`   ‚Ä¢ ${stat.tipo_produto}${categoria}: ${stat.quantidade} produtos`);
    });

    // Verificar se algum produto n√£o tem pre√ßos configurados
    console.log('\nüîç VERIFICA√á√ÉO DE INTEGRIDADE:');
    const problemaPizzas = await db.query(`
      SELECT nome, tipo_produto, tamanhos_precos, preco_unitario 
      FROM produtos 
      WHERE tipo_produto = 'pizza' AND (tamanhos_precos IS NULL OR tamanhos_precos = '[]'::jsonb)
    `);

    const problemaBordas = await db.query(`
      SELECT nome, tipo_produto, preco_unitario 
      FROM produtos 
      WHERE tipo_produto = 'borda' AND preco_unitario IS NULL
    `);

    if (problemaPizzas.rows.length === 0 && problemaBordas.rows.length === 0) {
      console.log('   ‚úÖ Todos os produtos t√™m pre√ßos configurados corretamente!');
    } else {
      console.log(`   ‚ùå Encontrados ${problemaPizzas.rows.length} pizzas sem pre√ßos`);
      console.log(`   ‚ùå Encontradas ${problemaBordas.rows.length} bordas sem pre√ßos`);
    }

    console.log('\nüéâ VERIFICA√á√ÉO CONCLU√çDA!');
    process.exit(0);
  } catch (error) {
    console.error('‚ùå Erro:', error.message);
    process.exit(1);
  }
}

verificarPrecos(); 