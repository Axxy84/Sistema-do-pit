require('dotenv').config();
const { Pool } = require('pg');

const pool = new Pool({
  host: process.env.DB_HOST || 'localhost',
  port: process.env.DB_PORT || 5432,
  database: process.env.DB_NAME || 'pizzaria_db',
  user: process.env.DB_USER || 'postgres',
  password: process.env.DB_PASSWORD || '8477'
});

async function limparDadosDashboardForcado() {
  let client;
  try {
    client = await pool.connect();
    
    console.log('üîÑ Iniciando limpeza FOR√áADA dos dados do dashboard...\n');
    
    // Iniciar uma transa√ß√£o para garantir que todas as opera√ß√µes sejam conclu√≠das ou nenhuma
    await client.query('BEGIN');
    
    // 1. Desativar temporariamente as restri√ß√µes de chave estrangeira
    console.log('üîì Desativando restri√ß√µes de chave estrangeira...');
    await client.query('SET CONSTRAINTS ALL DEFERRED');
    
    // 2. Verificar todas as tabelas relacionadas ao dashboard
    console.log('\nüìä Verificando tabelas antes da limpeza:');
    
    const tabelas = [
      'pedidos', 
      'itens_pedido', 
      'pagamentos_pedido', 
      'fechamento_caixa',
      'despesas_receitas'
    ];
    
    for (const tabela of tabelas) {
      try {
        const result = await client.query(`SELECT COUNT(*) FROM ${tabela}`);
        console.log(`   ‚Ä¢ ${tabela}: ${result.rows[0].count} registros`);
      } catch (error) {
        console.log(`   ‚Ä¢ ${tabela}: Tabela n√£o existe ou erro ao acessar`);
      }
    }
    
    // 3. Limpar cache do dashboard (se existir)
    try {
      console.log('\nüóëÔ∏è Limpando cache do dashboard...');
      await client.query("DELETE FROM cache WHERE key LIKE '%dashboard%'");
      console.log('‚úÖ Cache do dashboard limpo');
    } catch (error) {
      console.log('‚ÑπÔ∏è Tabela cache n√£o existe ou n√£o h√° registros de dashboard');
    }
    
    // 4. Truncar tabelas em ordem para evitar problemas de chave estrangeira
    console.log('\nüóëÔ∏è Truncando tabelas (modo FOR√áADO):');
    
    // Primeiro as tabelas dependentes
    try {
      await client.query('TRUNCATE TABLE itens_pedido CASCADE');
      console.log('‚úÖ Tabela itens_pedido truncada');
    } catch (error) {
      console.log(`‚ùå Erro ao truncar itens_pedido: ${error.message}`);
    }
    
    try {
      await client.query('TRUNCATE TABLE pagamentos_pedido CASCADE');
      console.log('‚úÖ Tabela pagamentos_pedido truncada');
    } catch (error) {
      console.log(`‚ÑπÔ∏è Tabela pagamentos_pedido n√£o existe ou erro: ${error.message}`);
    }
    
    // Depois as tabelas principais
    try {
      await client.query('TRUNCATE TABLE pedidos CASCADE');
      console.log('‚úÖ Tabela pedidos truncada');
    } catch (error) {
      console.log(`‚ùå Erro ao truncar pedidos: ${error.message}`);
      
      // Tentar m√©todo alternativo
      try {
        await client.query('DELETE FROM pedidos');
        console.log('‚úÖ Registros de pedidos deletados (m√©todo alternativo)');
      } catch (innerError) {
        console.log(`‚ùå Erro ao deletar pedidos: ${innerError.message}`);
      }
    }
    
    try {
      await client.query('TRUNCATE TABLE fechamento_caixa CASCADE');
      console.log('‚úÖ Tabela fechamento_caixa truncada');
    } catch (error) {
      console.log(`‚ùå Erro ao truncar fechamento_caixa: ${error.message}`);
      
      // Tentar m√©todo alternativo
      try {
        await client.query('DELETE FROM fechamento_caixa');
        console.log('‚úÖ Registros de fechamento_caixa deletados (m√©todo alternativo)');
      } catch (innerError) {
        console.log(`‚ùå Erro ao deletar fechamento_caixa: ${innerError.message}`);
      }
    }
    
    // 5. Limpar dados de vendas e estat√≠sticas
    try {
      await client.query('TRUNCATE TABLE despesas_receitas CASCADE');
      console.log('‚úÖ Tabela despesas_receitas truncada');
    } catch (error) {
      console.log(`‚ÑπÔ∏è Tabela despesas_receitas n√£o existe ou erro: ${error.message}`);
      
      // Tentar m√©todo alternativo
      try {
        await client.query('DELETE FROM despesas_receitas');
        console.log('‚úÖ Registros de despesas_receitas deletados (m√©todo alternativo)');
      } catch (innerError) {
        console.log(`‚ÑπÔ∏è Erro ou tabela n√£o existe: ${innerError.message}`);
      }
    }
    
    // 6. Restaurar as restri√ß√µes de chave estrangeira
    console.log('\nüîí Restaurando restri√ß√µes de chave estrangeira...');
    await client.query('SET CONSTRAINTS ALL IMMEDIATE');
    
    // Confirmar a transa√ß√£o
    await client.query('COMMIT');
    
    // 7. Verificar resultado final
    console.log('\nüìä Verificando tabelas ap√≥s a limpeza:');
    
    for (const tabela of tabelas) {
      try {
        const result = await client.query(`SELECT COUNT(*) FROM ${tabela}`);
        console.log(`   ‚Ä¢ ${tabela}: ${result.rows[0].count} registros`);
      } catch (error) {
        console.log(`   ‚Ä¢ ${tabela}: Tabela n√£o existe ou erro ao acessar`);
      }
    }
    
    console.log('\n‚úÖ Limpeza FOR√áADA dos dados do dashboard conclu√≠da!');
    console.log('üîÑ Agora voc√™ pode testar os c√°lculos reais do dashboard.');
    console.log('‚ö†Ô∏è IMPORTANTE: Reinicie o servidor backend para limpar o cache em mem√≥ria!');
    
  } catch (error) {
    if (client) {
      await client.query('ROLLBACK');
    }
    console.error('\n‚ùå Erro durante a limpeza dos dados:', error.message);
    console.error(error.stack);
  } finally {
    if (client) {
      client.release();
    }
    process.exit(0);
  }
}

limparDadosDashboardForcado(); 