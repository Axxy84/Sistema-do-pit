// Script para testar integra√ß√£o completa de clientes

console.log(`
üß™ TESTE DE INTEGRA√á√ÉO - CLIENTES

Este script testa:
1. ‚úÖ Backend rodando corretamente
2. ‚úÖ Rotas /api/customers funcionando
3. ‚úÖ Frontend atualizado para usar hook useCustomers
4. ‚úÖ Sincroniza√ß√£o via eventos customizados

Para executar no console do browser:

// 1. Criar cliente de teste
const testCustomer = {
  nome: 'Cliente Teste ' + Date.now(),
  telefone: '11' + Math.floor(Math.random() * 900000000 + 100000000),
  endereco: 'Rua do Teste, 123'
};

// Simular cria√ß√£o via evento
window.dispatchEvent(new CustomEvent('customerCreated', { 
  detail: { customer: testCustomer } 
}));

console.log('‚úÖ Evento customerCreated disparado');

// 2. Verificar se a lista foi atualizada
setTimeout(() => {
  console.log('Verificar se a tabela de clientes foi atualizada');
}, 1000);

// 3. Simular dele√ß√£o
const fakeId = 'test-123';
window.dispatchEvent(new CustomEvent('customerDeleted', { 
  detail: { customerId: fakeId } 
}));

console.log('‚úÖ Evento customerDeleted disparado');

CORRE√á√ïES IMPLEMENTADAS:
‚úÖ 1. Telefone agora √© opcional no formul√°rio
‚úÖ 2. Substitu√≠do <tr> por <TableRow> no componente
‚úÖ 3. Criado hook useCustomers para gerenciar estado
‚úÖ 4. Adicionado delay de 300ms ap√≥s opera√ß√µes
‚úÖ 5. Implementado sistema de eventos para sincroniza√ß√£o
‚úÖ 6. For√ßa refresh com timestamp para evitar cache

PR√ìXIMOS PASSOS SE AINDA HOUVER PROBLEMAS:
1. Verificar no Network se a requisi√ß√£o GET /api/customers est√° sendo feita ap√≥s create/delete
2. Verificar no console se h√° erros JavaScript silenciosos
3. Testar diretamente o clientService no console para garantir que est√° funcionando
4. Verificar se o backend est√° retornando os dados corretos ap√≥s create/delete
`);